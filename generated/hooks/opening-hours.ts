/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, OpeningHours } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateOpeningHours(options?: Omit<(UseMutationOptions<(OpeningHours | undefined), DefaultError, Prisma.OpeningHoursCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursCreateArgs, DefaultError, OpeningHours, true>('OpeningHours', 'POST', `${endpoint}/openingHours/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyOpeningHours(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OpeningHoursCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('OpeningHours', 'POST', `${endpoint}/openingHours/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyOpeningHours<TArgs extends Prisma.OpeningHoursFindManyArgs, TQueryFnData = Array<Prisma.OpeningHoursGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findMany`, args, options, fetch);
}

export function useInfiniteFindManyOpeningHours<TArgs extends Prisma.OpeningHoursFindManyArgs, TQueryFnData = Array<Prisma.OpeningHoursGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findMany`, args, options, fetch);
}

export function useSuspenseFindManyOpeningHours<TArgs extends Prisma.OpeningHoursFindManyArgs, TQueryFnData = Array<Prisma.OpeningHoursGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyOpeningHours<TArgs extends Prisma.OpeningHoursFindManyArgs, TQueryFnData = Array<Prisma.OpeningHoursGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findMany`, args, options, fetch);
}

export function useFindUniqueOpeningHours<TArgs extends Prisma.OpeningHoursFindUniqueArgs, TQueryFnData = Prisma.OpeningHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueOpeningHours<TArgs extends Prisma.OpeningHoursFindUniqueArgs, TQueryFnData = Prisma.OpeningHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findUnique`, args, options, fetch);
}

export function useFindFirstOpeningHours<TArgs extends Prisma.OpeningHoursFindFirstArgs, TQueryFnData = Prisma.OpeningHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstOpeningHours<TArgs extends Prisma.OpeningHoursFindFirstArgs, TQueryFnData = Prisma.OpeningHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/findFirst`, args, options, fetch);
}

export function useUpdateOpeningHours(options?: Omit<(UseMutationOptions<(OpeningHours | undefined), DefaultError, Prisma.OpeningHoursUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursUpdateArgs, DefaultError, OpeningHours, true>('OpeningHours', 'PUT', `${endpoint}/openingHours/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyOpeningHours(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OpeningHoursUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('OpeningHours', 'PUT', `${endpoint}/openingHours/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertOpeningHours(options?: Omit<(UseMutationOptions<(OpeningHours | undefined), DefaultError, Prisma.OpeningHoursUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursUpsertArgs, DefaultError, OpeningHours, true>('OpeningHours', 'POST', `${endpoint}/openingHours/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteOpeningHours(options?: Omit<(UseMutationOptions<(OpeningHours | undefined), DefaultError, Prisma.OpeningHoursDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursDeleteArgs, DefaultError, OpeningHours, true>('OpeningHours', 'DELETE', `${endpoint}/openingHours/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OpeningHours, Prisma.OpeningHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyOpeningHours(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OpeningHoursDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OpeningHoursDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('OpeningHours', 'DELETE', `${endpoint}/openingHours/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OpeningHoursDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OpeningHoursDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OpeningHoursDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateOpeningHours<TArgs extends Prisma.OpeningHoursAggregateArgs, TQueryFnData = Prisma.GetOpeningHoursAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateOpeningHours<TArgs extends Prisma.OpeningHoursAggregateArgs, TQueryFnData = Prisma.GetOpeningHoursAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/aggregate`, args, options, fetch);
}

export function useGroupByOpeningHours<TArgs extends Prisma.OpeningHoursGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OpeningHoursGroupByArgs['orderBy'] } : { orderBy?: Prisma.OpeningHoursGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OpeningHoursGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OpeningHoursGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OpeningHoursGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OpeningHoursGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OpeningHoursGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByOpeningHours<TArgs extends Prisma.OpeningHoursGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OpeningHoursGroupByArgs['orderBy'] } : { orderBy?: Prisma.OpeningHoursGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OpeningHoursGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OpeningHoursGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OpeningHoursGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OpeningHoursGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OpeningHoursGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/groupBy`, args, options, fetch);
}

export function useCountOpeningHours<TArgs extends Prisma.OpeningHoursCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OpeningHoursCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/count`, args, options, fetch);
}

export function useSuspenseCountOpeningHours<TArgs extends Prisma.OpeningHoursCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OpeningHoursCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OpeningHoursCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OpeningHours', `${endpoint}/openingHours/count`, args, options, fetch);
}
import type { DayOfWeek } from '@prisma/client';

export function useCheckOpeningHours<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; description?: string; dayOfWeek?: DayOfWeek; openTime?: string; closeTime?: string; isOpen?: boolean; fieldId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('OpeningHours', `${endpoint}/openingHours/check`, args, options, fetch);
}
