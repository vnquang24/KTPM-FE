/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MaintenanceSchedule } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMaintenanceSchedule(options?: Omit<(UseMutationOptions<(MaintenanceSchedule | undefined), DefaultError, Prisma.MaintenanceScheduleCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleCreateArgs, DefaultError, MaintenanceSchedule, true>('MaintenanceSchedule', 'POST', `${endpoint}/maintenanceSchedule/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMaintenanceSchedule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MaintenanceScheduleCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MaintenanceSchedule', 'POST', `${endpoint}/maintenanceSchedule/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindManyArgs, TQueryFnData = Array<Prisma.MaintenanceScheduleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindManyArgs, TQueryFnData = Array<Prisma.MaintenanceScheduleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindManyArgs, TQueryFnData = Array<Prisma.MaintenanceScheduleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindManyArgs, TQueryFnData = Array<Prisma.MaintenanceScheduleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findMany`, args, options, fetch);
}

export function useFindUniqueMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindUniqueArgs, TQueryFnData = Prisma.MaintenanceScheduleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindUniqueArgs, TQueryFnData = Prisma.MaintenanceScheduleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findUnique`, args, options, fetch);
}

export function useFindFirstMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindFirstArgs, TQueryFnData = Prisma.MaintenanceScheduleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleFindFirstArgs, TQueryFnData = Prisma.MaintenanceScheduleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/findFirst`, args, options, fetch);
}

export function useUpdateMaintenanceSchedule(options?: Omit<(UseMutationOptions<(MaintenanceSchedule | undefined), DefaultError, Prisma.MaintenanceScheduleUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleUpdateArgs, DefaultError, MaintenanceSchedule, true>('MaintenanceSchedule', 'PUT', `${endpoint}/maintenanceSchedule/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMaintenanceSchedule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MaintenanceScheduleUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MaintenanceSchedule', 'PUT', `${endpoint}/maintenanceSchedule/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMaintenanceSchedule(options?: Omit<(UseMutationOptions<(MaintenanceSchedule | undefined), DefaultError, Prisma.MaintenanceScheduleUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleUpsertArgs, DefaultError, MaintenanceSchedule, true>('MaintenanceSchedule', 'POST', `${endpoint}/maintenanceSchedule/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMaintenanceSchedule(options?: Omit<(UseMutationOptions<(MaintenanceSchedule | undefined), DefaultError, Prisma.MaintenanceScheduleDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleDeleteArgs, DefaultError, MaintenanceSchedule, true>('MaintenanceSchedule', 'DELETE', `${endpoint}/maintenanceSchedule/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MaintenanceSchedule, Prisma.MaintenanceScheduleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMaintenanceSchedule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MaintenanceScheduleDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MaintenanceScheduleDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MaintenanceSchedule', 'DELETE', `${endpoint}/maintenanceSchedule/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MaintenanceScheduleDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MaintenanceScheduleDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleAggregateArgs, TQueryFnData = Prisma.GetMaintenanceScheduleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleAggregateArgs, TQueryFnData = Prisma.GetMaintenanceScheduleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/aggregate`, args, options, fetch);
}

export function useGroupByMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MaintenanceScheduleGroupByArgs['orderBy'] } : { orderBy?: Prisma.MaintenanceScheduleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MaintenanceScheduleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MaintenanceScheduleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MaintenanceScheduleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MaintenanceScheduleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MaintenanceScheduleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MaintenanceScheduleGroupByArgs['orderBy'] } : { orderBy?: Prisma.MaintenanceScheduleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MaintenanceScheduleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MaintenanceScheduleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MaintenanceScheduleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MaintenanceScheduleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MaintenanceScheduleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/groupBy`, args, options, fetch);
}

export function useCountMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MaintenanceScheduleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/count`, args, options, fetch);
}

export function useSuspenseCountMaintenanceSchedule<TArgs extends Prisma.MaintenanceScheduleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MaintenanceScheduleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MaintenanceScheduleCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/count`, args, options, fetch);
}

export function useCheckMaintenanceSchedule<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; description?: string; reason?: string; status?: string; subfieldId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MaintenanceSchedule', `${endpoint}/maintenanceSchedule/check`, args, options, fetch);
}
